#Name of module
MODULE := oscillator

###############################################################

#Specify locations for Python and Numpy
PYTHON_INCLUDES := $$(python3-config --includes)
NUMPY_INCLUDES := -I/usr/lib/python3/dist-packages/numpy/core/include

#Create Command Flags
CXXFLAGS += -fPIC
LDFLAGS += -shared
SWIGFLAGS = -c++ -python

# Specify the link flags necessary for a Python extension
PYTHON_LIBS := $$(python3-config --libs)

#Create Flags
CXX=g++
SWIG = swig

#Create object directory
OBJDIR := obj

# Specify the shared object filename extension. Others use dll or dylib for example.
LIBEXT := so

###############################################################

#List C++ sources
LIBSRCS= oscillator.cxx

# C++ wrapper generated by SWIG: source and object files
WRAPPER := $(MODULE)_wrap.cxx
WRAPOBJ := $(OBJDIR)/$(MODULE)_wrap.o

# All of the sources in this project
SRCS := $(LIBSRCS) $(WRAPPER)

# Lists of object files for the shared library and the test program
LIBOBJS := $(LIBSRCS:%.cxx=$(OBJDIR)/%.o)

# Outputs from this build
SONAME := _$(MODULE).$(LIBEXT)
PYTHON_MODULE := $(MODULE).py

#Convenience variables for dependency generation
DEPDIR := $(OBJDIR)/.deps
SWIGDEPS := $(DEPDIR)/$(MODULE).swigdeps.d

###############################################################

# The compiler flags have the following meanings:
#
# -MT : Name of the target in the dependency file
# -MMD : Generate dependency information during compilation and omit
# system header files (-MD instead would include everything)
# -MP : Add a target for each prerequisite in the generated list
# -MF : Write the dependencies to the given file.
DEPFLAGS = -MT $@ -MMD -MP -MF $(DEPDIR)/$(*F).d
SWIGDEPFLAGS := -MM
COMPILE.cxx = $(CXX) $(DEPFLAGS) $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
LINKSHARED := $(CXX) $(LDFLAGS)

###############################################################

all:: $(SONAME) $(PYTHON_MODULE)

DEPS=oscillator.h
OBJ= $(SRCS: .cxx=.o)

$(WRAPPER) $(PYTHON_MODULE) &: $(MODULE).i | $(SWIGDEPS) $(DEPDIR)
	@echo Python module and C++ wrapper
	@echo Target: $@
	@#echo Stem: $*
	@echo Unsatisfied Prerequisites: $?
	swig -c++ $(SWIGDEPFLAGS) $< > $(SWIGDEPS)
	swig -c++ -python $<

$(SONAME): $(WRAPOBJ) $(LIBOBJS)
	@echo Shared library
	@echo Target: $@
	@#echo Stem: $*
	@echo Unsatisfied Prerequisites: $?
	$(LINKSHARED) $(LIBOBJS) $(WRAPOBJ) $(OUTPUT_OPTION) $(PYTHON_LIBS)

$(WRAPOBJ): $(WRAPPER) $(DEPDIR)/$(WRAPPER:%.cxx=%.d) | $(DEPDIR)
	@echo Wrapper.
	@echo Target: $@
	@#echo Stem: $*
	@echo Unsatisfied Prerequisites: $?
	$(COMPILE.cxx) $(PYTHON_INCLUDES) $(NUMPY_INCLUDES) $(OUTPUT_OPTION) $<

$(OBJDIR)/%.o : %.cxx $(DEPDIR)/%.d | $(DEPDIR)
	@echo A C++ file
	@echo Target: $@
	@#echo Stem: $*
	@echo Unsatisfied Prerequisites: $?
	$(COMPILE.cxx) $(OUTPUT_OPTION) $<

$(DEPDIR): ; mkdir -p $@

DEPFILES := $(SRCS:%.cxx=$(DEPDIR)/%.d) $(SWIGDEPS)
$(DEPFILES):

clean::
	@printf "Removing Object and Depend files...\n"
	@if [ "x`realpath $(OBJDIR)`x" = "x`realpath .`x" ] ; then \
		printf "\n*** Don't set OBJDIR to .\n\n" ; \
		$(RM) $(LIBOBJS) $(TESTOBJS) ; \
		$(RM) -r $(DEPDIR) ; \
	else \
		$(RM) -r $(OBJDIR) ; \
	fi
	$(RM) $(SONAME) $(WRAPPER) $(PYTHON_MODULE) $(TESTPRG)

include $(wildcard $(DEPFILES))
